masked
"for idx, elem in enumerate(numbers):    in enumerate(numbers): if idx != idx2: distance = abs(elem - elem2) if distance < threshold: return True return False"
result = [] current_string = [] current_depth = 0 for c in paren_string: if c == '(': current_depth += 1 current_string.append(c) elif c ==     current_string.append(c) if current_depth == 0: result.append(''.join(current_string)) current_string.clear() return result
return  % 1.0
balance = 0 for op in operations: balance += op if balance < 0: return True  
mean = sum(numbers) / len(numbers) return sum(abs(x - mean)   in numbers) / len(numbers)
if not numbers: return [] result = [] for n   result.append(n) result.append(delimeter) result.append(numbers[-1]) return result
"def parse_paren_group(s): depth = 0 max_depth = 0 for c in s: if c == '(': depth += 1 max_depth = max(depth, max_depth) else:     max_depth return [parse_paren_group(x) for x in paren_string.split(' ') if x]"
return [x for  in strings if substring in x]
"sum_value = 0 prod_value = 1 for n in   += n prod_value *= n return sum_value, prod_value"
running_max = None result = [] for n in numbers: if running_max is None: running_max = n else: running_max =   result.append(running_max) return result
if not string: return '' beginning_of_suffix = 0 while not   += 1 return string + string[:beginning_of_suffix][::-1]
"def xor(i, j): if i == j: return '0' else: return '1' return ''.join(xor(x, y) for x,   zip(a, b))"
if not strings: return None maxlen   for x in strings) for s in strings: if len(s) == maxlen: return s
"while b: a,  = b, a % b return a"
result = [] for  in range(len(string)): result.append(string[:i+1]) return result
return ' '.join([str(x) for x in  + 1)])
return 
"note_map = {'o': 4, 'o|': 2, '.|': 1} return [note_map[x] for x in music_string.split(' ')  "
times = 0 for i in range(len(string) - len(substring) + 1): if   substring: times += 1 return times
"value_map = { 'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9     for x in numbers.split(' ') if x], key=lambda x: value_map[x]))"
"closest_pair = None distance = None for idx, elem in enumerate(numbers): for idx2, elem2 in enumerate(numbers): if idx != idx2: if distance is None: distance = abs(elem - elem2) closest_pair = tuple(sorted([elem, elem2])) else: new_distance = abs(elem - elem2) if new_distance <      = tuple(sorted([elem, elem2])) return closest_pair"
min_number = min(numbers) max_number = max(numbers)   - min_number) / (max_number - min_number) for x in numbers]
" [x for x in values if isinstance(x, int)]"
return 
for i in reversed(range(n)):  n % i == 0: return i
import math fact = [] i = 2 while i <= int(math.sqrt(n) + 1): if n % i == 0: fact.append(i) n //= i else:     n > 1: fact.append(n) return fact
  c = collections.Counter(numbers) return [n for n in numbers if c[n] <= 1]
return 
return 
return [x for x in strings if 
return [e for e in  if e > 0]
"if n < 2:   for k in range(2, n - 1): if n % k == 0: return False return True"
"begin, end = -1., 1. while poly(xs, begin) * poly(xs, end) > 0: begin *= 2.0 end *= 2.0 while end - begin > 1e-10: center = (begin + end) / 2.0 if poly(xs,      0: begin = center else: end = center return begin"
l = list(l) l[::3] =  return l
return 
m = l[0]   in l: if e > m: m = e return m
ns = [] for i in range(n): if i % 11 == 0 or i % 13 == 0: ns.append(i) s     = 0 for c in s: ans += (c == '7') return ans
"evens = l[::2] odds = l[1::2] evens.sort() ans =   e, o in zip(evens, odds): ans.extend([e, o]) if len(evens) > len(odds): ans.append(evens[-1]) return ans"
return 
"import math def is_prime(p): if p < 2: return False for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)): if p % k == 0: return False      1] while True: f.append(f[-1] + f[-2]) if is_prime(f[-1]): n -= 1 if n == 0: return f[-1]"
"for i in range(len(l)): for j in range(i + 1, len(l)): for k in range(j + 1, len(l)):    l[j] + l[k] == 0: return True return False"
 n**2
return  + 1) for e in l]
"for i, l1 in enumerate(l): for j in range(i +   if l1 + l[j] == 0: return True return False"
"ret = """" while x > 0: ret = str(x   + ret x //= base return ret"
return a * h  2.0
"results = [0, 0, 2, 0]    4: return results[n] for _ in range(4, n + 1): results.append(results[-1] + results[-2] + results[-3] + results[-4]) results.pop(0) return results[-1]"
l = sorted(l) if len(l) % 2 == 1: return l[len(l) // 2]    // 2 - 1] + l[len(l) // 2]) / 2.0
for i in range(len(text)): if text[i] != text[len(text) - 1   return False return True
ret = 1 for i in range(n): ret =   ret) % p return ret
"return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in "
"return   s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])"
for e in  if e >= t: return False return True
return x + 
return set(s0)  set(s1)
if n == 0: return 0 if n == 1: return 1 return fib(n - 1) + fib(n  
"depth = 0 for b in brackets: if b == ""<"": depth += 1 else: depth -= 1 if depth    False return depth == 0"
"if l == sorted(l)  l == sorted(l, reverse=True): return True return False"
ret = set() for e1 in l1: for e2 in l2: if e1   ret.add(e1) return sorted(list(ret))
"def is_prime(k): if k < 2: return False for i in range(2, k - 1): if k % i == 0: return False return True largest = 1 for j in range(2, n + 1): if n % j      = max(largest, j) return largest"
return sum(range(n  1))
depth = 0 for b in brackets: if b ==    1 else: depth -= 1 if depth < 0: return False return depth == 0
"return [(i * x) for i, x  enumerate(xs)][1:]"
if n == 0: return 0 if n == 1: return    == 2: return 1 return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
"vowels = ""aeiouAEIOU"" n_vowels = sum(c in vowels for c in s) if s[-1]   or s[-1] == 'Y': n_vowels += 1 return n_vowels"
  str(x) if shift > len(s): return s[::-1] else: return s[len(s) - shift:] + s[:len(s) - shift]
"if s == """":   return sum(ord(char) if char.isupper() else 0 for char in s)"
lis   for i in s.split(' '): if i.isdigit(): lis.append(int(i)) return n - sum(lis)
"  0): return [] evens = list(filter(lambda x: x%2 == 0, arr)) if(evens == []): return [] return [min(evens), arr.index(min(evens))]"
"frq = [0] * (max(lst) + 1) for    frq[i] += 1; ans = -1 for i in range(1, len(frq)): if frq[i] >= i: ans = i return ans"
"  = [], True while lst: res.append(min(lst) if switch else max(lst)) lst.remove(res[-1]) switch = not switch return res"
"if a + b <= c or a + c <= b or b + c <=      (a + b + c)/2 area = (s * (s - a) * (s - b) * (s - c)) ** 0.5 area = round(area, 2) return area"
"if sum(q) > w: return False i, j = 0, len(q)-1   if q[i] != q[j]: return False i+=1 j-=1 return True"
ans = 0 for i in range(len(arr) //   arr[i] != arr[len(arr) - i - 1]: ans += 1 return ans
l1 = 0 for st    += len(st) l2 = 0 for st in lst2: l2 += len(st) if l1 <= l2: return lst1 else: return lst2
"def is_prime(n): for j in range(2,n): if n%j == 0: return False return True for i in range(2,101):      j in range(2,101): if not is_prime(j): continue for k in range(2,101): if not is_prime(k): continue if i*j*k == a: return True return False"
if (n == 1): return   1) power = 1 while (power < x): power = power * n return (power == x)
 = abs(a) return int(round(a ** (1. / 3))) ** 3 == a
"primes = ('2', '3', '5', '7',   total = 0 for i in range(0, len(num)): if num[i] in primes: total += 1 return total"
"return ""db"" + bin(decimal)[2:] + "
if len(s) < 3: return False for i in range(len(s) - 2): if s[i] ==    == s[i+2] or s[i] == s[i+2]: return False return True
"letter_grade = [] for gpa in grades: if gpa == 4.0: letter_grade.append(""A+"") elif gpa > 3.7: letter_grade.append(""A"") elif gpa > 3.3: letter_grade.append(""A-"") elif gpa > 3.0: letter_grade.append(""B+"") elif gpa > 2.7: letter_grade.append(""B"") elif gpa > 2.3: letter_grade.append(""B-"") elif gpa > 2.0: letter_grade.append(""C+"") elif        1.3: letter_grade.append(""C-"") elif gpa > 1.0: letter_grade.append(""D+"") elif gpa > 0.7: letter_grade.append(""D"") elif gpa > 0.0: letter_grade.append(""D-"") else: letter_grade.append(""E"") return letter_grade"
"l = len(string) if    or l == 1: return False for i in range(2, l): if l % i == 0: return False return True"
if n ==  return 1 return 18 * (10 ** (n - 2))
return bin(sum(int(i) for i  str(N)))[2:]
"return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == "
return ' '.join([''.join(sorted(list(i))) for  in s.split(' ')])
"coords =   for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x] return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])"
"return  if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)"
d = 'abcdefghijklmnopqrstuvwxyz' out = '' for   s: if c in d: out += d[(d.index(c)+2*2) % 26] else: out += c return out
 = sorted(set(lst)) return None if len(lst) < 2 else lst[1]
"  sentences = re.split(r'[.?!]\s*', S) return sum(sentence[0:2] == 'I ' for sentence in sentences)"
"if   isinstance(y,int) and isinstance(z,int): if (x+y==z) or (x+z==y) or (y+z==x): return True return False return False"
"vowels = ""aeiouAEIOU"" vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels]) message = message.swapcase()    i in vowels else i for i in message])"
"def isPrime(n): for i in range(2,int(n**0.5)+1): if n%i==0: return False return True maxx =     while i < len(lst): if(lst[i] > maxx and isPrime(lst[i])): maxx = lst[i] i+=1 result = sum(int(digit) for digit in str(maxx)) return result"
"if len(dict.keys()) == 0: return False else: state = ""start"" for key in dict.keys(): if isinstance(key, str) == False: state = ""mixed"" break if state ==        key.islower(): state = ""lower"" else: break elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()): state = ""mixed"" break else: break return state == ""upper"" or state == ""lower"""
"primes = [] for i in range(2, n): is_prime = True for j in range(2, i): if i % j == 0: is_prime = False break if is_prime:   "
 abs(a % 10) * abs(b % 10)
"count = 0 for i in   s[i] in ""AEIOU"": count += 1 return count"
"from math import floor, ceil if value.count('.') == 1: # remove trailing zeros while (value[-1] == '0'): value = value[:-1] num = float(value) if value[-2:] == '.5': if num > 0: res =      elif len(value) > 0: res = int(round(num)) else: res = 0 return res"
return [n + 2*i for  in range(n)]
"if   return [] s_list = [] for letter in s: if letter == ',': s_list.append(' ') else: s_list.append(letter) s_list = """".join(s_list) return s_list.split()"
if x > y: return -1 if y   == 0: return y if x == y: return -1 return y - 1
"if m < n: return -1 summation = 0 for i in range(n,   += i return bin(round(summation/(m - n + 1)))"
odd_digit_elements = [] for i in x: if all (int(c) % 2 == 1 for c in str(i)): odd_digit_elements.append(i)  
"dic = { 1:     ""Three"", 4: ""Four"", 5: ""Five"", 6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine"", } sorted_arr = sorted(arr, reverse=True) new_arr = [] for var in sorted_arr: try: new_arr.append(dic[var]) except: pass return new_arr"
"ret     in range(1,n+1): if i%2 == 0: x = 1 for j in range(1,i+1): x *= j ret += [x] else: x = 0 for j in range(1,i+1): x += j ret += [x] return ret"
"def is_palindrome(n): return str(n) == str(n)[::-1] even_palindrome_count = 0 odd_palindrome_count = 0 for i     i%2 == 1 and is_palindrome(i): odd_palindrome_count += 1 elif i%2 == 0 and is_palindrome(i): even_palindrome_count += 1 return (even_palindrome_count, odd_palindrome_count)"
"def digits_sum(n): neg = 1 if n < 0: n, neg =     n = [int(i) for i in str(n)] n[0] = n[0] * neg return sum(n) return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))"
if len(arr)==0: return True sorted_array=sorted(arr) my_arr=[] min_value=min(arr) min_index=arr.index(min_value) my_arr=arr[min_index:]+arr[0:min_index] for i   if my_arr[i]!=sorted_array[i]: return False return True
"odd = 0 even = 0 for i in lst1: if i%2 == 1: odd += 1 for i in lst2: if     += 1 if even >= odd: return ""YES"" return ""NO"""
"dict1={} list1=test.split("" "")   i in list1: if(list1.count(i)>t) and i!='': t=list1.count(i) if t>0: for i in list1: if(list1.count(i)==t): dict1[i]=t return dict1"
"s = ''.join([char for char in s if char not in   (s,s[::-1] == s)"
"res = [] for arr in lst: n = sum(int(d)%2==1     res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."") return res"
"max_sum =     for num in nums: s += -num if (s < 0): s = 0 max_sum = max(s, max_sum) if max_sum == 0: max_sum = max(-i for i in nums) min_sum = -max_sum return min_sum"
 sum([math.ceil(sum(arr)/capacity) for arr in grid])
"return sorted(sorted(arr),  x: bin(x)[2:].count('1'))"
"result = [] for word in s.split(): n_consonants = 0 for i in range(0, len(word)): if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]: n_consonants += 1 if    result.append(word) return result"
"if len(word) < 3: return """" vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'} for i in range(len(word)-2, 0, -1):     if (word[i+1] not in vowels) and (word[i-1] not in vowels): return word[i] return """""
def check(s): val = 0 for i in s: if i == '(': val = val + 1 else: val = val - 1 if val < 0: return       0 else False S1 = lst[0] + lst[1] S2 = lst[1] + lst[0] return 'Yes' if check(S1) or check(S2) else 'No'
if k == 0: return  arr.sort() ans = arr[-k:] return ans
"return sum([x for idx, x in enumerate(lst) if idx%2==0 and "
return sum(elem for elem in arr[:k] if  <= 2)
if n%2==0: odd_collatz = [] else: odd_collatz = [n] while n > 1: if n %     = n/2 else: n = n*3 + 1 if n%2 == 1: odd_collatz.append(int(n)) return sorted(odd_collatz)
"try: date = date.strip() month, day, year = date.split('-') month, day, year = int(month), int(day), int(year) if month < 1 or month > 12: return False if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:        day < 1 or day > 30: return False if month == 2 and day < 1 or day > 29: return False except: return False return True"
"if "" "" in txt: return    in txt: return txt.replace(',',' ').split() else: return len([i for i in txt if i.islower() and ord(i)%2 == 0])"
"count_digit =     in lst]) for i in lst: count_digit[i]+=1 if any(count_digit[i] > 2 for i in lst): return False if all(lst[i-1] <= lst[i] for i in range(1, len(lst))): return True else: return False"
"def is_prime(num): if num == 1 or num == 0:      2: return True for i in range(2, num): if num%i == 0: return False return True l = max(interval1[0], interval2[0]) r = min(interval1[1], interval2[1]) length = r - l if length > 0 and is_prime(length): return ""YES"" return ""NO"""
"if not arr: return None prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr))) return prod    i in arr])"
n = len(grid) val = n * n + 1         if grid[i][j] == 1: temp = [] if i != 0: temp.append(grid[i - 1][j]) if j != 0: temp.append(grid[i][j - 1]) if i != n - 1: temp.append(grid[i + 1][j]) if j != n - 1: temp.append(grid[i][j + 1]) val = min(temp) ans = [] for i in range(k): if i % 2 == 0: ans.append(1) else: ans.append(val) return ans
"if n == 0: return [1]     for i in range(2, n + 1): if i % 2 == 0: my_tri.append(i / 2 + 1) else: my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2) return my_tri"
product = 1 odd_count = 0 for digit in str(n): int_digit = int(digit)    1: product= product*int_digit odd_count+=1 if odd_count ==0: return 0 else: return product
opening_bracket_index = [] closing_bracket_index = [] for i in range(len(string)): if string[i] == '[': opening_bracket_index.append(i) else: closing_bracket_index.append(i) closing_bracket_index.reverse() cnt      l = len(closing_bracket_index) for idx in opening_bracket_index: if i < l and idx < closing_bracket_index[i]: cnt += 1 i += 1 return cnt >= 2
import math squared = 0 for i  lst: squared += math.ceil(i)**2 return squared
check   ')[-1] return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
ind=-1 i=1 while i<len(arr): if  ind=i i+=1 return ind
"smallest = list(filter(lambda x: x < 0, lst)) largest = list(filter(lambda x: x > 0, lst)) return (max(smallest) if smallest else    largest else None)"
"temp_a, temp_b = a, b if isinstance(temp_a, str): temp_a = temp_a.replace(',','.') if isinstance(temp_b, str): temp_b = temp_b.replace(',','.') if float(temp_a)    None return a if float(temp_a) > float(temp_b) else b"
return n%2 == 0 and n >= 
"fact_i = 1 special_fact = 1 for i in range(1, n+1): fact_i *= i special_fact *= fact_i  "
"new_text = """" i = 0 start, end = 0, 0 while i < len(text): if text[i] == "" "": end += 1 else: if end - start > 2: new_text += ""-""+text[i] elif end - start > 0: new_text += ""_""*(end - start)+text[i] else: new_text += text[i] start, end = i+1, i+1 i+=1 if end - start > 2: new_text += ""-"" elif end -        new_text"
"suf = ['txt', 'exe', 'dll'] lst = file_name.split(sep='.') if len(lst) != 2: return 'No' if not      if len(lst[0]) == 0: return 'No' if not lst[0][0].isalpha(): return 'No' t = len([x for x in lst[0] if x.isdigit()]) if t > 3: return 'No' return 'Yes'"
result =[] for i in range(len(lst)): if i %3 == 0: result.append(lst[i]**2)    4 == 0 and i%3 != 0: result.append(lst[i]**3) else: result.append(lst[i]) return sum(result)
"new_lst = [] for word in sentence.split(): flg = 0 if len(word) == 1: flg = 1 for i in range(2, len(word)): if len(word)%i     1 if flg == 0 or len(word) == 2: new_lst.append(word) return "" "".join(new_lst)"
"a, b    d = n.split(""/"") numerator = int(a) * int(c) denom = int(b) * int(d) if (numerator/denom == int(numerator/denom)): return True return False"
"def digits_sum(n): neg = 1 if n <    = -1 * n, -1 n = [int(i) for i in str(n)] n[0] = n[0] * neg return sum(n) return sorted(nums, key=digits_sum)"
"count = 0 for num in nums: if num > 10: odd_digits = (1,    9) number_as_string = str(num) if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits: count += 1 return count"
"A = [i*i - i + 1 for i in range(1,n+1)] ans = [] for i in range(n): for j     in range(j+1,n): if (A[i]+A[j]+A[k])%3 == 0: ans += [(A[i],A[j],A[k])] return len(ans)"
"planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"") if planet1 not in      planet_names or planet1 == planet2: return () planet1_index = planet_names.index(planet1) planet2_index = planet_names.index(planet2) if planet1_index < planet2_index: return (planet_names[planet1_index + 1: planet2_index]) else: return (planet_names[planet2_index + 1 : planet1_index])"
"lst.sort() new_lst = [] for i   if len(i)%2 == 0: new_lst.append(i) return sorted(new_lst, key=len)"
"if n == 1: return y for i in range(2, n): if n % i == 0: return   else: return x"
"return sum([i**2 for i in lst if i > 0   and ""."" not in str(i)])"
"return [abs(x-y)  x,y in zip(game,guess)]"
"strong = extensions[0] my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and        len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()]) if val > my_val: strong = s my_val = val ans = class_name + ""."" + strong return ans"
l = len(b) pat = b + b for    - l + 1): for j in range(l + 1): if a[i:i+l] == pat[j:j+l]: return True return False
even_count = 0 odd_count = 0 for i in str(abs(num)): if int(i)%2==0: even_count +=1 else: odd_count +=1   odd_count)
"num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000] sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"", ""L"", ""XC"", ""C"", ""CD"",       res = '' while number: div = number // num[i] number %= num[i] while div: res += sym[i] div -= 1 i -= 1 return res.lower()"
return a*a == b*b + c*c or b*b == a*a + c*c   == a*a + b*b
"return sorted(words, key = lambda x: (-len(set(x)), "
"if(need <= remaining): return [ number + need , remaining-need ] else: return [ number +   0]"
"expression = str(operand[0]) for oprt, oprn   operand[1:]): expression+= oprt + str(oprn) return eval(expression)"
"flg = 0 idx = 0 new_str = list(s) for i in s: if i.isalpha(): new_str[idx] = i.swapcase() flg = 1 idx += 1 s = """"     s += i if flg == 0: return s[len(s)::-1] return s"
import hashlib return hashlib.md5(text.encode('ascii')).hexdigest() if  else None
"lower = max(2,   upper = min(8, max(a, b)) return [i for i in range(lower, upper+1) if i % 2 == 0]"
